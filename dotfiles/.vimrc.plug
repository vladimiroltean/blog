call plug#begin('~/.vim/plugged')

Plug 'https://github.com/tpope/vim-dispatch'
" Provides C-Up and C-Down maps for swapping lines
Plug 'tpope/vim-unimpaired'
Plug 'https://github.com/vim-scripts/Colour-Sampler-Pack'
Plug 'https://github.com/bronson/vim-trailing-whitespace', { 'for': ['c', 'cpp', 'vim'] }
Plug 'scrooloose/nerdtree' ", { 'on': ['NERDTreeToggle', 'NERDTree'] }
" Handy mappings for <Leader>ci etc
Plug 'scrooloose/nerdcommenter'
" Handy search with <C>-f
Plug 'https://github.com/mileszs/ack.vim', { 'on': 'Ack' }
" Fuzzy file search
Plug 'https://github.com/ctrlpvim/ctrlp.vim' ", { 'on': 'CtrlP' }
" Accelerate motions with <Leader><Leader>w etc
Plug 'https://github.com/easymotion/vim-easymotion'
" Provides the handy info in statusbar and left of buffer for modified files
Plug 'airblade/vim-gitgutter' ", { 'on': 'GitGutterToggle' }
" Provides mappings for git checkout, branch etc
Plug 'tpope/vim-fugitive'
" Provides handy commands like :SudoWrite etc
Plug 'tpope/vim-eunuch'
" Easy searching through Vim change list
Plug 'vim-scripts/Gundo', { 'on': 'GundoToggle' }
Plug 'majutsushi/tagbar' ", { 'on': 'TagbarToggle' }
" Might get replaced by junegunn/vim-easy-align
Plug 'https://github.com/godlygeek/tabular.git', { 'on': 'Tabularize' }
" Context autocomplete engine
Plug 'Valloric/YouCompleteMe', { 'on': 'YcmCompleter' }
Plug 'rdnetto/YCM-Generator', { 'branch': 'stable', 'on': 'YcmGenerateConfig' }
" Syntax-aware % matching
Plug 'tmhedberg/matchit'
Plug 'drn/zoomwin-vim', { 'on': 'ZoomWin' }
" For vimpager compatibility with git colors
Plug 'https://github.com/vim-scripts/AnsiEsc.vim'
Plug 'https://github.com/vim-scripts/TeTrIs.vim'
Plug 'https://github.com/vim-scripts/taglist.vim'

" Add plugins to &runtimepath
call plug#end()

autocmd! User YouCompleteMe if !has('vim_starting') | call youcompleteme#Enable() | endif

let g:ctrlp_extensions = ['tag', 'buffertag', 'quickfix', 'dir', 'rtscript',
                        \ 'undo', 'line', 'changes', 'mixed', 'bookmarkdir']
let g:ycm_global_ycm_extra_conf = '~/.vim/_ycm_extra_conf.py'


" NERDTree

" If the parameter is a directory, cd into it
function s:CdIfDirectory(directory)
  let explicitDirectory = isdirectory(a:directory)
  let directory = explicitDirectory || empty(a:directory)

  if explicitDirectory
    exe "cd " . fnameescape(a:directory)
  endif

  " Allows reading from stdin
  " ex: git diff | mvim -R -
  if strlen(a:directory) == 0
    return
  endif

  if directory
    NERDTree
    wincmd p
    bd
  endif

  if explicitDirectory
    wincmd p
  endif
endfunction

" NERDTree utility function
function s:UpdateNERDTree(...)
  let stay = 0

  if(exists("a:1"))
    let stay = a:1
  end

  if exists("t:NERDTreeBufName")
    let nr = bufwinnr(t:NERDTreeBufName)
    if nr != -1
      exe nr . "wincmd w"
      exe substitute(mapcheck("R"), "<CR>", "", "")
      if !stay
        wincmd p
      end
    endif
  endif
endfunction

let NERDTreeHijackNetrw = 0
let NERDTreeShowHidden = 1

function! rc:NERDTreeIsOpen()
	return exists("t:NERDTreeBufName") && (bufwinnr(t:NERDTreeBufName) != -1)
endfunction

function! rc:NERDTreeSync(buffername)
	if &modifiable && rc:NERDTreeIsOpen() && strlen(a:buffername) > 0 && !&diff
		NERDTreeFind
		wincmd l
	endif
endfunction

augroup AuNERDTreeCmd
	" Open NERDTree on left-hand side if requested to open a directory
	autocmd AuNERDTreeCmd VimEnter * call s:CdIfDirectory(expand("<amatch>"))
	autocmd AuNERDTreeCmd FocusGained * call s:UpdateNERDTree()
	" close vim if the only window left open is a NERDTree?
	autocmd AuNERDTreeCmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
	" Highlight a file in NERDTree when opening it in a buffer
	"autocmd AuNERDTreeCmd BufEnter * call rc:NERDTreeSync(expand("<amatch>"))
augroup END

